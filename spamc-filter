#!/usr/bin/perl

# spamc-filter - a simple filter for integrating spamassassin SQL user 
#                preferences and Postfix
# 
# Copyright 2014 Matthew Hunt
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#
# Arguments: Sender address (from Postfix)
#            Recipient address (from Postfix)
#
# Attempts to determine a single recipient; if multiple recipients are passed
# in, attempts to determine a single common domain; otherwise, uses global
# preferences.
#
# After checking, input is piped to the spamc process (which, in turn, pipes
# the input to the sendmail process)
#
# Typically this can be used by adding the following line to your Postfix
# configuration in /etc/postfix/master.cf:
#
#spamassassin unix -     n       n       -       -       pipe user=spamd argv=/usr/local/bin/spamc-filter --sender=${sender} --recipient=${recipient}
#
# If you don't want to have multiple recipient support, you can set the max
# recipients to 1 in /etc/postfix/main.cf
#
#spamassassin_destination_recipient_limit=1

use Modern::Perl;
use autodie;

use Getopt::Long;

my ($sender, $recipient);
my $result = GetOptions("sender=s" => \$sender, "recipient=s"   => \$recipient);

if (not defined $sender or not defined $recipient) {
    die "Failed to get options.\n\nUsage: $0 --sender=[sender] --recipient=[recipient]\n";
}

my $spamc_bin    = '/usr/bin/spamc';
my $sendmail_bin = '/usr/sbin/sendmail';

my $sa_user = '$GLOBAL';

# For multiple recipients, try to find a common domain
if ($recipient =~ m/\,/) {
    my $sa_domain = common_domain($recipient);
    if (defined $sa_domain && $sa_domain ne "") {
        $sa_user = '%' . $sa_domain;
    }
}
else {
    $sa_user = $recipient;
}

# Having made a best effort to work out the username for obtaining per-user
# configuration settings, pipe the message to spamc:
open(my $spamc, "|$spamc_bin -u '$sa_user' -f -e $sendmail_bin -oi -f '$sender' '$recipient'");

# Pipe STDIN to spamc
while(!eof(STDIN)) {
    my $line = readline(STDIN);
    $spamc->print($line);
}
$spamc->close();

exit 0;

# Determine if all recipients of a message share a common domain and, if so,
# return it for spamc to use to fetch domain defaults
sub common_domain {
    my $recipient_str  = shift;

    # We shouldn't have been called if this is the case but...
    return if ($recipient_str !~ m/\,/);

    my @recipient_list = split(/,/, $recipient_str);

    my $last_domain;
    foreach my $recipient (@recipient_list) {
        my $domain;
        if ($recipient =~ m/\@/) {
            (undef, $domain) = split(/\@/, $recipient, 2);
        }
        else {
            $domain = 'localhost';
        }

        return if (defined $last_domain && $domain ne $last_domain);

        $last_domain = $domain;
    }

    return $last_domain;
}
